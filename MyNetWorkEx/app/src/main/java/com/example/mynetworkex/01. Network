
01. Network

비동기 -> Async
동기 -> sync

동기 방식
    - 작업을 순서대로 진행한다.
    - A -> B -> C -> D
    - 위에서부터 아래로 실행

비동기 방식
    - Thread 를 만들어서 작업을 따로 처리한다.

---------------------------------------------->
                         | (메인 Thread 에게 알려준다.)
            ------------->
                작업


네트워크
--> 통신

DataBase <-----------> Server <-----------> Client(app, web, ...)
글                                            A
댓글                                          B

Local DataBase 의 한계
    - 동기화가 어렵다. (휴대폰, 태블릿) 데이터가 따로 따로 존재한다.
    - 상호작용이 불가능하다. (남의 데이터를 볼 수 없다.)

<결론: 네트워크 통신을 통해 데이터를 받아야한다.>


서버와 통신하는 방법

    - 헤당 URL 로 요청한다.
    - 추가 정보를 보낼 수 있다. (Ex: putExtra) 사용자가 누군지 알아야한다. : 인증정보
    - JSON 형식을 사용해서 data 를 보낸다.
    - JavaScript Object Notation --> JavaScript 에서 객체를 만들 때 사용하는 표현식

JSON 형식
    - [] -> List
    - {} -> 객체


JSON Response
[
    {
      "userId": 1,
      "id": 1,
      "title": "delectus aut autem",
      "completed": false
    },
    {
      "userId": 1,
      "id": 2,
      "title": "quis ut nam facilis et officia qui",
      "completed": false
    },
]

JSON Parsing
    - 자바가 이해할 수 있도록 변환하는 과정

Serializable(직렬화)
    - 자바 직렬화란 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서도
   사용할 수 있도록 바이트(byte)형태로 데이터를 변환하는 기술과 바이트로 변환된 데이터를
   다시 객체로 변환하는 기술(역직렬화)를 아울러 이야기한다.


id, name. age, intro ... --> Data 를 매칭시켜준다. (key 값에 맞춰서)

class ToDo{
    int id;
    String name;
    int age;
}

Request Type (요청 유형/방식)
    - GET : 정보 요청 (일반적, 보여져도 상관 X)
    - POST : 정보 추가 요청 (민감한 정보 등)
    - DELETE : 정보 삭제 요청 (Ex: 댓글 썼다 지울때 등 ..)
    - PUT : 정보 수정 요청 (필드의 일부만 전달할 경우 선택한 필드 외 모두 NULL/초기값 처리가 된다. 전체적 수정이 일어날 때 사용.)
    - PATCH : 정보 수정 요청 (필드/자원의 부분만 교체할 때 사용. 자원 교체 시 일부 필드만 필요)



라이브러리 (네트워크 통신 관련 라이브러리 사용하기)
    - Volley
    - Retrofit





















