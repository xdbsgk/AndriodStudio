

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


1. Git 사용하는 이유

장소와 상관없이 코드 확인
소스 코드나 파일의 이력 관리
소스코드 편집 전으로 되돌릴 때
프로젝트를 공유해 개발할 때



2. 버전 관리 시스템 (Version Control System)

사용자의 프로젝트에 포함된 파일의 변경 사항을 추적할 수 있도록 돕는 방법론, 도구
단순한 버전 관리 시스템: 파일 복사본 만들어서 파일 이름 뒤에 사용자가 직접 날짜와 시간을 붙여서 관리하기.



3. 소프트웨어 형상관리 (SCM, SoftWare Configuration Management) (= 버전 관리 시스템)

SW 개발, 유지보수에서 발생하는 소스코드, 문서, 인터페이스 등 각종 결과물에 대한 형상을 만들고 
이를 형상에 대한 변경을 체계적으로 관리, 제어하기 위한 활동




4. Git (!!!분산형!!! 버전 관리 시스템)

리누스 토발즈(리눅스 개발자)가 Linux 커널을 관리할 목적으로 개발함. 소스코드를 효과적으로 관리하기 위해 개발
(Linux 커널: 운영체제에 중요하게 포함되는 요소. HW와 SW의 사이의 비서)

소스코드의 변경이력 쉽게 확인가능. 특정 시점에 저장된 버전과 비교/특정 시점으로 되돌아갈 수 있음.

내가 올리려는 파일이 누군가 편집한 내용과 충돌한다면, 서버에 업로드할 때 경고 메시지 발생됨. 
덮어버리는 실수 없앨 수 있음.



5. 버전 관리 시스템 (Version Control System) Vs 분산 버전 관리 시스템 (Distributed Version Control System)

기존 버전 관리 시스템: 중앙 서버에 소스코드와 history를 직접 저장하는 방식
분산 버전 관리 시스템: 여러 개발 PC와 저장소에 분산해 저장하는 방식 (중간 단계가 추가됐다고 생각.)
--> 중앙 서버에 장애가 발생해도 로컬 저장소에서 소스코드나 파일을 원격 저장소로 다시 올릴 수 있고, 
중앙 저장소에 코드나 파일 이력 등을 다시 복원할 수 있음.



6. SVN(SubVersion) Vs Git

Git 
- 빠르다
- 모든 작업자가 원본 보유
- Local(자신의 컴퓨터, 네트워크 통신이 안되는 곳)에서 대부분의 작업 가능
- SVN보다 관리 포인트가 적다 (간편함) -> 기존 SVN보다 편함.



7. GitHub(웹서비스)

깃 != 깃허브
마이크로소프트사의 웹 서비스
GitHub는 DVCS(분산형 버전 관리 시스템) Git을 기반으로 소스 코드르 호스팅하고, 
협업 기능을 지원하는 소스 코드 호스팅 서비스이자 소프트웨어 개발 플랫폼




8. etc
깃랩
https://about.gitlab.com/


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



1. 이력을 관리하는 저장소

- 저장소(Git Repository): 파일이나 폴더를 저장해두는 곳
같은 파일이라도 실제 내용의 일부가 다르면 다른 파일로 인식하기 때문에 파일을 변경 사항 별로 구분해서 저장할 수 있음.

원격 저장소 Vs 로컬 저장소
- 원격 저장소 (Remote Repository): 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소
				(깃허브, 깃랩)
- 로컬 저장소 (Local Repository): 내 PC에 파일이 저장되는 개인 전용 저장소

--> 평소에는 내 PC의 로컬 저장소에서 작업하다가 작업한 내용을 공개하고 싶을 때에 원격 저장소에 업로드한다.
물론 원격 저장소에서 다른 사람들이 작업한 파일을 로컬 저장소로 가져올 수도 있다.

Push, Pull



2. 저장소 만들기

내 컴퓨터에 로컬 저장소 만들기
(1) 저장소를 새로 만든다.
(2) 원격 저장소를 로컬 저장소로 복사해온다.



3. Git의 세가지 상태 (논리적 구분)

(1) Working Directory
	->(add) -> (2)

(2) Staging Area(index)
	-> commit -> (3)

(3) .git directory(Repository)


변경 내용을 저장소에 바로 기록하지 않고 그 사이 공간인 Staging Area에 먼저 상태를 기록하게 되어 있다.
따라서 저장소에 변경 사항을 기록하기 위해서는 모든 변경 사항들이 Staging Area에 존재해야 한다.

Staging Area 공간이 사이에 있기 때문에 작업 트리 안에 있는 커밋이 필요 없는 파일을 커밋에 포함하지 않을 수 있고,
파일에서 내가 원하는 일부 변경 사항만 Staging Area에 등록해 커밋이 가능하다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


새 저장소 만들기 

​

우선 helloGit 이라는 폴더를 C 드라이버에 생성합니다. helloGit 폴더를 Git 관리 하에 두려면, 폴더 안 빈 화면에서 우클릭을 한 후 Git Bash hero 을 선택 합니다. 



​

Git bash 

git bash 는 window 의 cmd , linux와 mac 의 terminal 과 같은 역할을 한다.

그러나 운영체제마다 명령어가 다르다는 문제점이 있는데, 이를 극복한것이 바로 Git bash 입니다. 

Git bash 를 이용하면 window 에서도 리눅스의 명령어를 쓸 수 있다.

따라서 mac 이나 리눅스를 사용하는 경우 기존 terminal 을 사용해도 무관하지만,

window 유저는 git bash 를 사용하는 것이 편리합니다. 

​


​

​

​

​

​

Git 명령어 

​

● init 

$ git init
: git init 명령어를 수행하면 숨겨진 폴더 .git 이 생성됩니다. 이 것을 저장소라고 하는데 깃은 이 폴더의 모든 변경 내용을 여기에 저장합니다. 즉 .git 폴더를 지우면 더 이상 깃으로 폴더의 변경사항을 추적할 수 없습니다. 

​

​

● status 

$ git status 
: 깃이 폴더의 현재 변경 상태를 보는 명령어입니다. 

​


​

​

​

● add

$ git add A.txt 
▶ 폴더의 전체 변경 사항을 지정할 수도 있다. 

$ git add *
​

​

​

​

● reset 

: 스테이징 된 (add 취소) 파일을 취소 할 수 있다. 

$ git reset A.txt
▶ 폴더의 전체 변경 사항을 지정할 수도 있다. 

$ git reset *
​

​

​

​

​

● commit 

: 깃이 폴더의 변경 내용을 저장하는 단위를 "커밋(commit)" 이라고 부르는데, add 명령어 이후 Staging Area 상태에 등록된 파일들만 commit 을 할 수 있고 명령어 실행 후에 Repository 에 저장 된다. 

$ git commit 
▶ 에디터를 열지않고 바로 메세지를 입력할 수 있는 -m 옵션도 자주 사용한다.

$ git commit -m'두번째 커밋 메세지 입니다'
​

▶ 매번 변경사항을 스테이징하고 커밋하는게 번거롭다면 -a 옵션을 사용하자.

$ git commit -am'스테이징과 커밋을 한번에 할 수 있습니다'
​

​

​

​

● log 

: 스테이징을 거쳐 커밋한 결과를 로그(log)라는 형식으로 확인 합니다. 

$ git log
▶ 많은 로그를 한 줄로 편하게 보기위해서 --oneline 옵션도 자주 사용합니다. 

$ git log --oneline
​

​

​

​

● show  

: 커밋에 변경 내용이 반영되었는지 보려면 show 명령어를 사용합니다. 

$ git show
▶ 특정 커밋의 변경사항을 보고 싶다면 로그에 있는 커밋 해쉬로 볼 수 있습니다. 

$ git show 28afc4f0d7b4f8beba9ddeb992098b4013dc5e9d
​

​

​

​

​

● reset HEAD^

: 커밋된 상태도 되돌릴 수 있습니다. 굳이 커밋이 필요 없는 시점에 커밋했다거나, 커밋하고 약간 수정했는데 별도 커밋으로 두기 싫다거나 할 때는 위 명령어로 최신 커밋들을 취소할 수 있습니다. 과정을 한번 살펴보면 아래와 같습니다.

​

▶ git reset HEAD^ (가장 최신 커밋 1개 취소(삭제))

▶ git reset HEAD^^(가장 최신 커밋 2개 취소(삭제))

▶꺽쇠 갯수에 따라 최신 커밋을 필요한만큼 순서대로 삭제할 수 있음

$ git reset HEAD^
​
[출처] Git - 3|작성자 devnote1
​































































